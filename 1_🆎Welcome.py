import streamlit as st
import time
import numpy as np
import pandas as pd
import random
import pydeck as pdk

from datetime import datetime
from helper import read_sql

#st.set_page_config(page_title="Plotting Demo", page_icon="üìà")

st.title("A/B Home üè†")

st.markdown(
"""
##### –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –ø—ã—Ç–ª–∏–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä!

##### –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π—à–Ω–∏–π –º–∏—Ä —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ - –∑–¥–µ—Å—å —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ —Ä–∞–¥–æ—Å—Ç—å –æ—Ç –ø—Ä–æ–∫—Ä–∞—Å–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤, —Ç–∞–∫ –∏ –≥–æ—Ä–µ—á—å –æ—Ç –≥–ª—É–±–æ–∫–æ –∑–∞–∫–æ–ø–∞–Ω–Ω—ã—Ö –Ω–µ–∫–æ–≥–¥–∞ –ª—É—á—à–∏—Ö –∏–¥–µ–π.
"""
)
st.sidebar.markdown("#### by CVM&Analytics team")
st.divider()

st.header("–ö–∞–∫–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã?", divider=True)

main_table = "delta.`abfss://deltalake@p0dbscv0sa0dbrks.dfs.core.windows.net/data/ab/main`"
units_table = "delta.`abfss://deltalake@p0dbscv0sa0dbrks.dfs.core.windows.net/data/ab/units`"
geo_table = "delta.`abfss://deltalake@p0dbscv0sa0dbrks.dfs.core.windows.net/data/ab/units_geo`"

query_in_progress = f"""
    select
        experiment_short_name,
        target_metric,
        hypothesis,
        start_of_test,
        status,
        alpha,
        beta,
        load_datetime,
        days_for_test
    from {main_table}
    where status = 'in progress'
"""


with st.spinner("Downloading data..."):
    df_metrics_by_unit = read_sql(query=query_in_progress)
    len_df = df_metrics_by_unit.shape[0]
    df_metrics_by_unit["dynamic"] = [[random.randint(0, 100) for _ in range(30)] for i in range(len_df)]
    column_to_move = df_metrics_by_unit.pop("dynamic")
    df_metrics_by_unit.insert(2, "dynamic", column_to_move)
    
    def add_days_to_the_end(x):
        return (datetime.now() - datetime.strptime(x, "%Y-%m-%d")).days
    df_metrics_by_unit["days_to_the_end"] = df_metrics_by_unit["start_of_test"].apply(lambda x: add_days_to_the_end(x))
    df_metrics_by_unit["time_to_end_percent"] = np.round(df_metrics_by_unit["days_to_the_end"] / df_metrics_by_unit["days_for_test"], 4)
    column_to_move = df_metrics_by_unit.pop("time_to_end_percent")
    df_metrics_by_unit.insert(3, "time_to_end_percent", column_to_move)
    
    st.dataframe(
        df_metrics_by_unit,
        column_config={
            "experiment_short_name": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç",
            "target_metric": "–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞",
            "dynamic": st.column_config.AreaChartColumn(
                "–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏",
                width="medium",
                y_min=0,
                y_max=100,
            ),
            "days_to_the_end": "–î–Ω–µ–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞",
            "days_for_test": "–í—Å–µ–≥–æ –¥–Ω–µ–π –≤ —Ç–µ—Å—Ç–µ",
            "time_to_end_percent": st.column_config.ProgressColumn(
                "–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞",
                help="–í—Ä–µ–º—è –≤ %",
                min_value=0,
                max_value=1,
            ),
            "hypothesis": "–ì–∏–ø–æ—Ç–µ–∑–∞",
            "start_of_test": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞",
            "status": "–°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞",
            "alpha": "–û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–æ–¥–∞",
            "beta": "–û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞",
            "load_datetime": "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
        },
        hide_index=True,
    )
st.divider()

st.header("–ö–∞–∫–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –∫ –∑–∞–ø—É—Å–∫—É?", divider=True)
st.markdown(
    """
    ##### –¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞
    """
)

query_not_approved = f"""
    select
        experiment_short_name,
        target_metric,
        hypothesis,
        design_date,
        status,
        alpha,
        beta,
        load_datetime
    from {main_table}
    where status = 'design not approved'
"""

with st.spinner("Downloading data..."):
    df_metrics_by_unit = read_sql(query=query_not_approved)
    len_df = df_metrics_by_unit.shape[0]
    df_metrics_by_unit["dynamic"] = [[random.randint(0, 100) for _ in range(30)] for i in range(len_df)]

    column_to_move = df_metrics_by_unit.pop("dynamic")
    df_metrics_by_unit.insert(2, "dynamic", column_to_move)

    st.dataframe(
        df_metrics_by_unit,
        column_config={
            "experiment_short_name": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç",
            "target_metric": "–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞",
            "dynamic": st.column_config.AreaChartColumn(
                "–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏",
                width="medium",
                y_min=0,
                y_max=100,
            ),
            "hypothesis": "–ì–∏–ø–æ—Ç–µ–∑–∞",
            "design_date": "–î–∞—Ç–∞ –¥–∏–∑–∞–π–Ω–∞",
            "status": "–°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞",
            "alpha": "–û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–æ–¥–∞",
            "beta": "–û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞",
            "load_datetime": "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
        },
        hide_index=True,
    )
st.button("–û–±–Ω–æ–≤–∏—Ç—å")
st.divider()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏ –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
def plot_map(df):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    df['latitude'] = pd.to_numeric(df['latitude'], errors='coerce')
    df['longitude'] = pd.to_numeric(df['longitude'], errors='coerce')
    df['units_cnt'] = [int(i) for i in np.random.normal(7, 5, len(df))]
    df['units_cnt'] = pd.to_numeric(df['units_cnt'], errors='coerce')
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    df = df.dropna(subset=['latitude', 'longitude', 'units_cnt'])

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π units_cnt
    min_units = df['units_cnt'].min()
    max_units = df['units_cnt'].max()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è units_cnt
    def get_color(units_cnt):
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π units_cnt –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1
        norm_value = (units_cnt - min_units) / (max_units - min_units) if max_units != min_units else 0.5
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –æ—Ç –∑–µ–ª–µ–Ω–æ–≥–æ (0, 255, 0) –¥–æ –∫—Ä–∞—Å–Ω–æ–≥–æ (255, 0, 0)
        red = int(255 * norm_value)
        green = int(255 * (1 - norm_value))
        return [red, green, 0]  # –¶–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ [R, G, B]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–æ—á–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è units_cnt
    df['color'] = df['units_cnt'].apply(get_color)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    russia_view = pdk.ViewState(
        latitude=55.7558,  # —à–∏—Ä–æ—Ç–∞
        longitude=37.6176,  # –¥–æ–ª–≥–æ—Ç–∞
        zoom=3,  # —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        min_zoom=2,
        max_zoom=15,
        pitch=0,  # —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–µ–∫
    scatter_layer = pdk.Layer(
        "ScatterplotLayer",
        data=df,
        get_position=["longitude", "latitude"],
        get_fill_color="color",  # –¶–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'color'
        get_radius=100,  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å —Ç–æ—á–µ–∫
        radius_scale=100,  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
        radius_min_pixels=3,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
        radius_max_pixels=10,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
        pickable=True,  # –í–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å "–ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å" —Ç–æ—á–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        auto_highlight=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    )

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å —Ç–µ–º–Ω—ã–º —Å—Ç–∏–ª–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π —Å —Ç–æ—á–∫–∞–º–∏
    st.pydeck_chart(
        pdk.Deck(
            map_style="mapbox://styles/mapbox/dark-v9",  # —Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å –∫–∞—Ä—Ç—ã
            initial_view_state=russia_view,
            layers=[scatter_layer],  # –°–ª–æ–π —Å —Ç–æ—á–∫–∞–º–∏
            tooltip={
                "html": (
                    "<b>Unit Name:</b> {unit_name}<br/>"
                    "<b>Units Count:</b> {units_cnt}<br/>"
                    "<b>Address:</b> {Address}<br/>"
                    "<b>City:</b> {CityName}<br/>"
                    "<b>Region:</b> {RegionName}<br/>"
                    "<b>Partner:</b> {Partner}"
                ),
                "style": {"color": "white"}
            },
        )
    )


geo_query = f""" select * from {geo_table}"""
with st.spinner("Downloading data..."):
    units_geo = read_sql(query=geo_query)
    st.header("–ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∏—Ü—Ü–µ—Ä–∏–π —Ç–µ—Å—Ç–∞–º–∏", divider=True)
    st.markdown(
        """
        ##### –ù–∞ –∫–∞—Ä—Ç–µ - –≤—Å–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏ –î–æ–¥–æ –≤ –†–§. –ì—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –æ—Ç–º–µ—á–µ–Ω—ã –ø–∏—Ü—Ü–µ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞–º–∏. –ü–∏—Ü—Ü–µ—Ä–∏–∏, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–º, —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç. –£—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ –ø—Ä–∏ –¥–∏–∑–∞–π–Ω–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞.
        """
    )
    plot_map(units_geo)

st.divider()

st.header("–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: A/B —Ç–µ—Å—Ç—ã –∏ –≥–¥–µ –æ–Ω–∏ –æ–±–∏—Ç–∞—é—Ç", divider=True)
st.write("""
1. [–ù–∞—à–∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è](https://excalidraw.com/#room=b2a7611dc161be832ffb,zNzDpeivzbHNAX04ZV-1mw)
2. [–°—Ç–∞—Ç—å—è –∫–æ–ª–ª–µ–≥ –∏–∑ X5](https://habr.com/ru/companies/X5Tech/articles/466349/)
3. [–°—Ç–∞—Ç—å—è –∫–æ–ª–ª–µ–≥ –∏–∑ –û–∑–æ–Ω](https://habr.com/ru/companies/ozontech/articles/712306/)
4. [–í–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É '–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∏–∑–∞–π–Ω—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞?'](https://www.youtube.com/watch?v=ly-pqx1P34k)
""")

st.divider()

st.header("FAQ", divider=True)
with st.expander("–•–æ—á—É –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?"):
    st.write('''
        –í –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–∫–∞—Ö —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ª–∏–Ω–∫ –Ω–∞ –Ω–∞—à—É –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é - –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–µ–π. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å—Ç—É—á–∏—Å—å –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤.
        –ù–æ –µ—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ, —Ç–æ:
        
            - –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –¥–∏–∑–∞–π–Ω–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞, –¥–∏–∑–∞–π–Ω - –Ω–∞—à–µ –≤—Å–µ, '–Ω–∏ —à–∞–≥—É –≤–ø—Ä–∞–≤–æ, –Ω–∏ —à–∞–≥—É –≤–ª–µ–≤–æ'
            
            - –¥–∏–∑–∞–π–Ω —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ Design <-- —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–∑–¥–µ–ª
            
            - –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏—Ç–∏–∫ –∞–ø–ø—Ä—É–≤–Ω–µ—Ç —Ç–≤–æ–π –¥–∏–∑–∞–π–Ω - –º–æ–∂–µ—à—å —Å–º–µ–ª–æ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –æ –≤–Ω–æ—Å–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            
        –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞!
    ''')

with st.expander("–ú–æ–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∫–∞–∫ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑/–¥–µ–Ω—å–≥–∏/–≤—ã–º–ø–µ–ª/—Ä—É—á–∫—É/–≥—Ä–∞–º–æ—Ç—É?"):
    st.write('''
        –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —á—Ç–æ —Ç—ã –¥–æ—à–µ–ª –¥–æ —ç—Ç–∞–ø–∞ –æ—Ü–µ–Ω–∫–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞, –Ω–æ —Å–µ–π—á–∞—Å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é –≤–Ω–µ –•–æ–≥–≤–∞—Ä—Ç—Å–∞ –º–∞–≥–∏—é –∏ –æ—Ü–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç —Ä—É—á–∫–∞–º–∏.
        –î–∞, –ø–æ–∫–∞ —Ä—É—á–∫–∞–º–∏, –Ω–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.
        
        –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º —É–∂–µ –æ—Å—á–∞—Å—Ç–ª–∏–≤–∏–ª–æ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∏ –æ–Ω –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É Estimation –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ—è–≤—è—Ç—Å—è —Ç–∞–º.
        –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç.
    ''')

with st.expander("–ß—Ç–æ-—Ç–æ —É –≤–∞—Å —Ç—É—Ç —Å–ª–æ–º–∞–ª–æ—Å—å, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–≤—Å–µ–º"):
    st.write('''
        –ü–µ—á–∞–ª—å, –ø–∏—à–∏ –Ω–∞–º –≤ ad_hoc_analytics - –º—ã –ø—Ä–∏–¥–µ–º –Ω–∞ —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å —Å –í–æ—Å—Ç–æ–∫–∞ –≤–º–µ—Å—Ç–µ —Å –≤–æ—Å—Ö–æ–¥–æ–º —Å–æ–ª–Ω—Ü–∞. –®—É—Ç–∫–∞, –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –±—ã—Å—Ç—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.
    ''')
