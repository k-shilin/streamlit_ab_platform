import streamlit as st
import pandas as pd
import random
import altair as alt

from helper import read_sql

st.title("Estimation üîç")
st.markdown(
"""
##### –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ü–µ–Ω–µ–Ω—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º–∏ –∏–ª–∏ –æ–∂–∏–¥–∞—é—Ç —Å–≤–æ–µ–π –æ—Ü–µ–Ω–∫–∏
"""
)
st.sidebar.markdown("#### by CVM&Analytics team")
st.divider()
main_table = "delta.`abfss://deltalake@p0dbscv0sa0dbrks.dfs.core.windows.net/data/ab/main`"
st.header("–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ü–µ–Ω–∫–∏", divider=True)
query_for_estimation = f"""
    select
        experiment_short_name,
        target_metric,
        hypothesis,
        status,
        fact_effect,
        p_value,
        stat_sagnificant
    from {main_table}
    where status = 'design not approved'
"""

with st.spinner("Downloading data..."):
    df_metrics_by_unit = read_sql(query=query_for_estimation)
    len_df = df_metrics_by_unit.shape[0]
    df_metrics_by_unit["dynamic"] = [[random.randint(0, 100) for _ in range(30)] for i in range(len_df)]

    column_to_move = df_metrics_by_unit.pop("dynamic")
    df_metrics_by_unit.insert(2, "dynamic", column_to_move)

    st.dataframe(
        df_metrics_by_unit,
        column_config={
            "experiment_short_name": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç",
            "target_metric": "–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞",
            "dynamic": st.column_config.AreaChartColumn(
                "–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏",
                width="medium",
                y_min=0,
                y_max=100,
            ),
            "status": "–°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞",
            "fact_effect": "–≠—Ñ—Ñ–µ–∫—Ç, %",
            "p_value": "P-value",
            "stat_sagnificant": "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å"
        },
        hide_index=True,
    )

st.divider()

st.header("–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã, –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –æ—Ü–µ–Ω–∫—É", divider=True)

query_with_estimation = f"""
    select
        experiment_short_name,
        target_metric,
        hypothesis,
        status,
        fact_effect,
        p_value,
        stat_sagnificant
    from {main_table}
    where status = 'in progress'
"""

with st.spinner("Downloading data..."):
    df_metrics_by_unit = read_sql(query=query_with_estimation)
    len_df = df_metrics_by_unit.shape[0]
    df_metrics_by_unit["dynamic"] = [[random.randint(0, 100) for _ in range(30)] for i in range(len_df)]
    column_to_move = df_metrics_by_unit.pop("dynamic")
    df_metrics_by_unit.insert(2, "dynamic", column_to_move)

    st.dataframe(
        df_metrics_by_unit,
        column_config={
            "experiment_short_name": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç",
            "target_metric": "–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞",
            "dynamic": st.column_config.AreaChartColumn(
                "–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏",
                width="medium",
                y_min=0,
                y_max=100,
            ),
            "status": "–°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞",
            "fact_effect": "–≠—Ñ—Ñ–µ–∫—Ç, %",
            "p_value": "P-value",
            "stat_sagnificant": "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å"
        },
        hide_index=True,
    )
    
st.divider()

st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞", divider=True)


dynamic_table = "delta.`abfss://deltalake@p0dbscv0sa0dbrks.dfs.core.windows.net/data/ab/dynamic_example`"
query_for_data = f"select * from {dynamic_table}"
query_for_exp = f"""
    select
        experiment_short_name,
        target_metric,
        hypothesis,
        status,
        start_of_test,
        days_for_test,
        ci_left_bound,
        ci_right_bound,
        ci_length,
        fact_effect,
        p_value,
        var_decrease_in_test,
        stat_sagnificant,
        experiment_id
    from {main_table}
    where status = 'finished with estimation'
"""

with st.spinner("Downloading data..."):
    df_metrics_by_unit = read_sql(query=query_for_data)
    #df_metrics_by_unit.to_csv(r"C:\Users\repin\Desktop\GitHub\dodo\streamlit-dev\dynamic.csv", index=False)
    df_metrics_by_unit['SaleDate'] = pd.to_datetime(df_metrics_by_unit['SaleDate'])

    input = st.text_input("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞", "D613748ED532A03B6CF1014A9ECFC282")
    st.write("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:", input)
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞
    line_chart = alt.Chart(df_metrics_by_unit).mark_line().encode(
            x='SaleDate:T',  # –û—Å—å X - –¥–∞—Ç–∞
            y='revenue:Q',  # –û—Å—å Y - –¥–æ—Ö–æ–¥
            color='period:N',  # –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
            strokeDash='group:N'  # –†–∞–∑–ª–∏—á–∞–µ–º –≥—Ä—É–ø–ø—ã (–∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Ç–µ—Å—Ç) —à—Ç—Ä–∏—Ö–æ–≤–∫–æ–π –ª–∏–Ω–∏–∏
        ).properties(
            title='–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –∏ –≥—Ä—É–ø–ø–∞–º'
        )
    st.altair_chart(line_chart, use_container_width=True, theme=None,)

    df_metrics_by_unit = read_sql(query=query_for_exp).T
    st.dataframe(
        df_metrics_by_unit,
        column_config={
            "experiment_short_name": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç",
            "target_metric": "–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞",
            "hypothesis": "–ì–∏–ø–æ—Ç–µ–∑–∞",
            "status": "–°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞",
            "start_of_test": "–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞",
            "days_for_test": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ",
            "ci_left_bound": "–õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –î–ò",
            "ci_right_bound": "–ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –î–ò",
            "ci_length": "–î–ª–∏–Ω–∞ –î–ò",
            "fact_effect": "–≠—Ñ—Ñ–µ–∫—Ç, %",
            "p_value": "P-value",
            "stat_sagnificant": "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å",
            "var_decrease_in_test": "–°–Ω–∏–∂–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –Ω–∞ —Ç–µ—Å—Ç–µ",
            "experiment_id": "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"
        },
        hide_index=False,
        use_container_width=True
    )
    st.button("–û–±–Ω–æ–≤–∏—Ç—å")

