import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from dictionaries import CHANNELS_DICT, COUNTRIES_DICT, SOURCES_DICT, TARGETS_DICT, CATEGORIES_DICT
from design_flow import TestDesign, send_message_to_loop
from saver_for_design import write_data_to_cvm_ab_design

#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
if 'show_form_block' not in st.session_state:
    st.session_state['show_form_block'] = True

if 'show_matrix' not in st.session_state:
    st.session_state['show_matrix'] = False

if 'choose_final_params' not in st.session_state:
    st.session_state['choose_final_params'] = False

if 'hm' not in st.session_state:
    st.session_state['hm'] = None

if 'show_confirmation' not in st.session_state:
    st.session_state['show_confirmation'] = False

if 'confirmation_action' not in st.session_state:
    st.session_state['confirmation_action'] = None

def add_choose_final_params():
    st.session_state['choose_final_params'] = True

def reset_app():
    st.session_state['show_form_block'] = True
    st.session_state['show_matrix'] = False
    st.session_state['choose_final_params'] = False
    st.session_state['hm'] = None

if st.session_state['show_form_block']:
    st.set_page_config(page_title="", page_icon="üåç")
    st.sidebar.markdown("#### by CVM&Analytics team")


    server_hostname = st.secrets["databricks"]["server_hostname"]
    http_path = st.secrets["databricks"]["http_path"]
    databricks_token = st.secrets["databricks"]["access_token"]

    st.markdown("# A/B Design")
    st.subheader('1. –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ—Å—Ç–∞')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π products
    products = None
    with st.form('matrix_params_form'):
        st.subheader('**–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞**')
        # Input widgets
        target_metric = st.selectbox('–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞', ['–í—ã—Ä—É—á–∫–∞', '–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ú–∞—Ä–∂–∞'])
        countries = st.multiselect('–°—Ç—Ä–∞–Ω–∞', ['–†–æ—Å—Å–∏—è', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'], ['–†–æ—Å—Å–∏—è'])
        channels = st.multiselect('–ö–∞–Ω–∞–ª', ['–î–æ—Å—Ç–∞–≤–∫–∞', '–†–µ—Å—Ç–æ—Ä–∞–Ω', '–°–∞–º–æ–≤—ã–≤–æ–∑'], ['–î–æ—Å—Ç–∞–≤–∫–∞', '–†–µ—Å—Ç–æ—Ä–∞–Ω', '–°–∞–º–æ–≤—ã–≤–æ–∑'])
        sources = st.multiselect('–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞', ['–ú–ü', '–ö–∞—Å—Å–∞', '–°–∞–π—Ç', '–ö–∏–æ—Å–∫', '–í—Å–µ'], ['–í—Å–µ'])
        categories = st.multiselect('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤', ['–∫–æ–º–±–æ', '–ø–∏—Ü—Ü–∞', '–Ω–∞–ø–∏—Ç–∫–∏', '–∑–∞–∫—É—Å–∫–∏', '—Å–æ—É—Å—ã', '—Ç–æ–≤–∞—Ä—ã', '–¥–µ—Å–µ—Ä—Ç—ã', '–∫—É—Å–æ—á–∫–∏'], ['–∫–æ–º–±–æ', '–ø–∏—Ü—Ü–∞', '–Ω–∞–ø–∏—Ç–∫–∏', '–∑–∞–∫—É—Å–∫–∏', '—Å–æ—É—Å—ã', '–¥–µ—Å–µ—Ä—Ç—ã', '–∫—É—Å–æ—á–∫–∏'])

        st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ  CSV c –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏')
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å Id –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
        if uploaded_file is not None:
            products = pd.read_csv(uploaded_file)
            products = list(products[list(products.columns)[0]].values)
            products = ", ".join([f"'{id}'" for id in products])

        submitted = st.form_submit_button('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')


if submitted:
    st.session_state['show_matrix'] = False
    st.session_state['choose_final_params'] = False

    st.header('2. –†–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã')
    st.markdown(':hourglass_flowing_sand: –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç.')

    test_params = {
        "target_metric": TARGETS_DICT[target_metric],
        "alpha": 0.05,
        "beta": 0.2,
        "start_period": str(datetime.now().date() - timedelta(days=30)),
        "end_period": str(datetime.now().date() - timedelta(days=1)),
    }

    if sources == ['–í—Å–µ']:
        sources = list(SOURCES_DICT.keys())

    query_params = {
        'country': TestDesign.mapping_values(countries, COUNTRIES_DICT),
        'channel': TestDesign.mapping_values(channels, CHANNELS_DICT),
        'source': TestDesign.mapping_values(sources, SOURCES_DICT),
        'category': TestDesign.mapping_values(categories, CATEGORIES_DICT)
    }
    # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –≤ –∑–∞–ø—Ä–æ—Å
    if products:
        query_params['products_subq'] = f"and ord.ComboProductUUId in ({products})"
    else:
        query_params['products_subq'] = ""

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
    design = TestDesign(params_dict=test_params)
    orders_table = "delta.`abfss://deltalake@p0dbsbb0sa0dbrks.dfs.core.windows.net/data/gold/OrderCompositionExtended`"
    deps_table = "delta.`abfss://deltalake@p0dbsbb0sa0dbrks.dfs.core.windows.net/data/gold/DepartmentUnitsInfo`"

    query = f"""
        select ord.UnitUUId,  
            dep.Name,
          ord.SaleDate,
          sum(ord.ProductTotalPrice) as revenue,
          count(distinct ord.OrderUUId) as cnt_orders
    from {orders_table} ord
    inner join {deps_table} dep
          on ord.UnitUUId=dep.UUId
    where 1=1
    and ord.BusinessId='DodoPizza'
    and ord.CountryId_int=({query_params['country']})
    and ord.SaleDate>='{design.start_cuped_period}'
    and ord.SaleDate<'{design.end_period}'
    and ord.OrderType in ({query_params['channel']})
    and ord.OrderSource in ({query_params['source']})
    and ord.ComboProductCategoryId in ({query_params['category']})
    {query_params['products_subq']}
    group by ord.UnitUUId,  
            dep.name,
          ord.SaleDate
    """

    df_metrics_by_unit = TestDesign.read_sql(query=query,
                                            server_hostname=server_hostname,
                                             http_path=http_path,
                                             access_token=databricks_token)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ —é–Ω–∏—Ç–∞–º –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    df_metrics_by_unit['cnt_unique_dates'] = (df_metrics_by_unit
                                              .groupby(['UnitUUId'])['SaleDate']
                                              .transform('nunique')
                                              )
    df_metrics_by_unit = (df_metrics_by_unit
                          [df_metrics_by_unit['cnt_unique_dates']
                           == df_metrics_by_unit['cnt_unique_dates'].max()]
                          .drop(columns=['cnt_unique_dates'])
                          )

    df_metrics_by_unit['SaleDate'] = pd.to_datetime(df_metrics_by_unit['SaleDate'])
    df_metrics_by_unit[design.target_metric] = df_metrics_by_unit[design.target_metric].astype(float)
    df = df_metrics_by_unit[df_metrics_by_unit['SaleDate'] >= design.start_period].reset_index(drop=True)
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CUPED
    df_history = df_metrics_by_unit[df_metrics_by_unit['SaleDate'] < design.start_period].reset_index(drop=True)
    # –°—á–∏—Ç–∞–µ–º CUPED –º–µ—Ç—Ä–∏–∫—É
    df_cuped = design.calculate_cuped_metric(df, df_history)
    # –°—á–∏—Ç–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è CUPED –º–µ—Ç—Ä–∏–∫–∏
    df_sample_size = design.get_sample_size_matrix(design.get_sample_size_standart, df_cuped, is_cuped=True)
    df_matrix, hm = design.get_day_matrix(df_sample_size)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
    st.session_state['hm'] = hm

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
    st.balloons()
    st.session_state['show_matrix'] = True

if st.session_state['show_matrix']:
    if st.session_state['hm'] is not None:
        st.altair_chart(st.session_state['hm'], use_container_width=True)
    st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", on_click=add_choose_final_params)

if st.session_state['choose_final_params']:

    st.header('3. –í–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞ —Ç–µ—Å—Ç–∞')
    with st.form('final_params_form'):
        st.subheader('**–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞**')
        # Input widgets
        responsible_name = st.text_input("–ó–∞–∫–∞–∑—á–∏–∫ (–ò–º—è, –§–∞–º–∏–ª–∏—è):")
        test_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:")
        test_len = st.selectbox('–î–ª–∏–Ω–∞ —Ç–µ—Å—Ç–∞', [14,21,28,35,42,49,56])
        cnt_units = st.text_input("–ö–æ–ª-–≤–æ –ø–∏—Ü—Ü–µ—Ä–∏–π:")
        mde_lst = [round(x,3) for x in list(np.linspace(0.01, 0.10, 19))]
        mde = st.selectbox('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç', mde_lst)
        target_metric = st.selectbox('–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞', ['–í—ã—Ä—É—á–∫–∞', '–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ú–∞—Ä–∂–∞'])
        countries = st.multiselect('–°—Ç—Ä–∞–Ω–∞', ['–†–æ—Å—Å–∏—è', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'], ['–†–æ—Å—Å–∏—è'])
        channels = st.multiselect('–ö–∞–Ω–∞–ª', ['–î–æ—Å—Ç–∞–≤–∫–∞', '–†–µ—Å—Ç–æ—Ä–∞–Ω', '–°–∞–º–æ–≤—ã–≤–æ–∑'], ['–î–æ—Å—Ç–∞–≤–∫–∞', '–†–µ—Å—Ç–æ—Ä–∞–Ω', '–°–∞–º–æ–≤—ã–≤–æ–∑'])
        sources = st.multiselect('–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞', ['–ú–ü', '–ö–∞—Å—Å–∞', '–°–∞–π—Ç', '–ö–∏–æ—Å–∫', '–í—Å–µ'], ['–í—Å–µ'])
        categories = st.multiselect('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤', ['–∫–æ–º–±–æ', '–ø–∏—Ü—Ü–∞', '–Ω–∞–ø–∏—Ç–∫–∏', '–∑–∞–∫—É—Å–∫–∏', '—Å–æ—É—Å—ã', '—Ç–æ–≤–∞—Ä—ã', '–¥–µ—Å–µ—Ä—Ç—ã', '–∫—É—Å–æ—á–∫–∏'],
                                    ['–∫–æ–º–±–æ', '–ø–∏—Ü—Ü–∞', '–Ω–∞–ø–∏—Ç–∫–∏', '–∑–∞–∫—É—Å–∫–∏', '—Å–æ—É—Å—ã', '–¥–µ—Å–µ—Ä—Ç—ã', '–∫—É—Å–æ—á–∫–∏'])

        st.write('–ó–∞–≥—Ä—É–∑–∏—Ç–µ  CSV c –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏')
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å Id –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
        if uploaded_file is not None:
            products = pd.read_csv(uploaded_file)
            products = list(products[list(products.columns)[0]].values)
            products = ", ".join([f"'{id}'" for id in products])

        hypo = st.text_input("–ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞:")
        comment = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        submitted = st.form_submit_button('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É')

    if submitted:
        design_params_dict = {
            "experiment_short_name": test_name,
            "target_metric": target_metric,
            "alpha": 0.05,
            "beta": 0.2,
            "mde": mde,
            "days_for_test": test_len,
            "hypothesis":hypo,
            "comment":comment
        }
        exp_id = write_data_to_cvm_ab_design(design_params_dict=design_params_dict, return_exp_id=True)


        message = f"–£—Ä–∞, —Ä–∞–±–æ—Ç–∞!:pepe_party:\n"
        message += f"ID: {exp_id}\n"
        message+= f"–ó–∞–∫–∞–∑—á–∏–∫: {responsible_name}\n"
        message += f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: {test_name}\n"
        message += f"–°—Ç—Ä–∞–Ω–∞: {countries}\n"
        message += f"–ö–æ–ª-–≤–æ –ø–∏—Ü—Ü–µ—Ä–∏–π –≤ —Ç–µ—Å—Ç–µ: {test_len}\n"
        message += f"–î–ª–∏–Ω–∞ —Ç–µ—Å—Ç–∞: {test_len}\n"
        message += f"–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: {target_metric}\n"
        message += f"–ö–∞–Ω–∞–ª: {channels}\n"
        message += f"–ì–∏–ø–æ—Ç–µ–∑–∞: {hypo}\n"
        message += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
        send_message_to_loop(message)
        st.markdown('–õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∑–∞–π–Ω —Ç–µ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º')
        st.markdown('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!')


else:
    st.write('‚òùÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!')




